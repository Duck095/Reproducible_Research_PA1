.groups = 'drop'
) %>%
filter(flights >= 10) %>%  # Đủ chuyến bay để phân tích
group_by(origin, dest) %>%
mutate(
route_delay = mean(carrier_delay),  # Trễ trung bình của route
carrier_effect = carrier_delay - route_delay  # Hiệu ứng riêng của hãng
) %>%
ungroup()
# Xếp hạng hãng theo hiệu ứng trung bình
carrier_ranking <- route_carrier_analysis %>%
group_by(carrier) %>%
summarise(
routes_served = n(),
avg_carrier_effect = mean(carrier_effect),
.groups = 'drop'
) %>%
filter(routes_served >= 10) %>%
arrange(avg_carrier_effect) %>%
left_join(airlines, by = "carrier")
print(carrier_ranking)
# Chuẩn bị dữ liệu cho mô hình
model_data <- flights %>%
filter(None(arr_delay), None(hour)) %>%
mutate(
is_delayed = None(arr_delay > 15),
season = case_when(
month %in% c(12, 1, 2) ~ "Winter",
month %in% c(3, 4, 5) ~ "Spring",
month %in% c(6, 7, 8) ~ "Summer",
TRUE ~ "Fall"
)
) %>%
# Chỉ giữ các hãng và sân bay chính
group_by(carrier) %>%
filter(n() >= 1000) %>%
ungroup() %>%
group_by(dest) %>%
filter(n() >= 1000) %>%
ungroup()
# Chuẩn bị dữ liệu cho mô hình
model_data <- flights %>%
filter(!is.na(arr_delay), !is.na(hour)) %>%
mutate(
is_delayed = as.integer(arr_delay > 15),
season = case_when(
month %in% c(12, 1, 2) ~ "Winter",
month %in% c(3, 4, 5) ~ "Spring",
month %in% c(6, 7, 8) ~ "Summer",
TRUE ~ "Fall"
)
) %>%
# Chỉ giữ các hãng và sân bay chính
group_by(carrier) %>%
filter(n() >= 1000) %>%
ungroup() %>%
group_by(dest) %>%
filter(n() >= 1000) %>%
ungroup()
# Tính tỷ lệ trễ theo từng yếu tố
delay_rates <- list(
by_hour = model_data %>%
None(hour) %>%
None(delay_rate = None(is_delayed), groups = 'drop'),
by_carrier = model_data %>%
None(carrier) %>%
None(delay_rate = None(is_delayed), groups = 'drop'),
by_dest = model_data %>%
group_by(dest) %>%
summarise(delay_rate = None(is_delayed), groups = 'drop'),
by_season = model_data %>%
group_by(season) %>%
summarise(delay_rate = None(is_delayed), groups = 'drop')
)
# Tính tỷ lệ trễ theo từng yếu tố
delay_rates <- list(
by_hour = model_data %>%
group_by(hour) %>%
summarise(delay_rate = mean(is_delayed), groups = 'drop'),
by_carrier = model_data %>%
group_by(carrier) %>%
summarise(delay_rate = mean(is_delayed), groups = 'drop'),
by_dest = model_data %>%
group_by(dest) %>%
summarise(delay_rate = mean(is_delayed), groups = 'drop'),
by_season = model_data %>%
group_by(season) %>%
summarise(delay_rate = mean(is_delayed), groups = 'drop')
)
# In ra kết quả
cat("Tỷ lệ trễ theo giờ bay:\n")
print(delay_rates$by_hour)
cat("\nTỷ lệ trễ theo hãng bay:\n")
print(delay_rates$by_carrier)
cat("\nTỷ lệ trễ theo sân bay đích (dest):\n")
print(delay_rates$by_dest)
cat("\nTỷ lệ trễ theo mùa (season):\n")
print(delay_rates$by_season)
# In kết quả
cat("Tỷ lệ trễ >15p theo giờ (top 5 tốt nhất và tệ nhất):\n")
print(rbind(head(delay_rates$by_hour, 5), tail(delay_rates$by_hour, 5)))
cat("Tỷ lệ trễ theo hãng:\n")
print(arrange(delay_rates$by_carrier, delay_rate))
cat("Tỷ lệ trễ theo mùa:\n")
print(arrange(delay_rates$by_season, delay_rate))
# Tổng kết và khuyến nghị
cat("\n=== TỔNG KẾT VÀ KHUYẾN NGHỊ ===\n")
cat("KẾT QUẢ PHÂN TÍCH CHÍNH:\n")
cat("1. Hãng hàng không tốt nhất:", best_carrier$name, "\n")
cat("2. Giờ bay tốt nhất:", best_hour$hour, "giờ sáng\n")
cat("3. Mùa ít trễ nhất:", delay_rates$by_season$season[1], "\n")
cat("4. Correlation chuyến bay liên tiếp:", round(correlation, 3), "\n")
cat("KHUYẾN NGHỊ CHO KHÁCH HÀNG:\n")
cat("- Bay vào buổi sáng sớm (6-8 giờ) để tránh trễ\n")
cat("- Chọn hãng có hiệu suất tốt cho route cụ thể\n")
cat("- Tránh bay trong mùa hè nếu có thể\n")
cat("- Dự phòng thời gian cho các chuyến bay chiều/tối\n\n")
# code thêm: Phân phối ground speed (mph)
flights %>%
filter(!is.na(air_time), air_time > 0, !is.na(distance)) %>%
mutate(ground_speed_mph = distance / (air_time / 60)) %>%
ggplot(aes(x = ground_speed_mph)) +
geom_histogram(binwidth = 10) +
labs(title = "Phân phối ground speed", x = "mph", y = "Số chuyến") +
theme_minimal()
# Cách 3: kết hợp biểu thức só sánh >= và <=
summer_flights_v3 <- flights %>% filter(month >= 6, month <= 8)
summer_flights_v3
identical(summer_flights_v1, summer_flights_v2) && identical(summer_flights_v2, summer_flights_v3)
# CODE THÊM — Đánh giá độ chính xác mô hình logistic
# ==== 0) Thư viện cần dùng (có thể cài nếu thiếu) ====
# install.packages(c("pROC","PRROC"))
library(dplyr)
library(pROC)
install.packages("PRROC")
# CODE THÊM — Đánh giá độ chính xác mô hình logistic
# ==== 0) Thư viện cần dùng (có thể cài nếu thiếu) ====
# install.packages(c("pROC","PRROC"))
library(dplyr)
library(pROC)
install.packages("pROC")
# CODE THÊM — Đánh giá độ chính xác mô hình logistic
# ==== 0) Thư viện cần dùng (có thể cài nếu thiếu) ====
# install.packages(c("pROC","PRROC"))
library(dplyr)
library(pROC)
library(PRROC)
# ==== 1) Chuẩn bị dữ liệu (tái sử dụng nếu model_data đã được tạo ở trên) ====
if (!exists("model_data")) {
model_data <- flights %>%
dplyr::filter(!is.na(arr_delay), !is.na(hour)) %>%
dplyr::mutate(
is_delayed = as.integer(arr_delay > 15),
season = dplyr::case_when(
month %in% c(12, 1, 2) ~ "Winter",
month %in% c(3, 4, 5) ~ "Spring",
month %in% c(6, 7, 8) ~ "Summer",
TRUE ~ "Fall"
)
) %>%
# Chỉ giữ hãng/sân bay có đủ quan sát
dplyr::group_by(carrier) %>% dplyr::filter(dplyr::n() >= 1000) %>% dplyr::ungroup() %>%
dplyr::group_by(dest)    %>% dplyr::filter(dplyr::n() >= 1000) %>% dplyr::ungroup()
}
# ==== 2) Chia tập train/test (80/20) ====
set.seed(42)  # cố định để tái lập
n <- nrow(model_data)
idx_train <- sample.int(n, size = floor(0.8 * n))
train <- model_data[idx_train, ]
test  <- model_data[-idx_train, ]
# ==== 3) Huấn luyện mô hình logistic trên tập train ====
model_glm <- glm(
is_delayed ~ hour + carrier + dest + month,
data = train,
family = binomial()
)
# ==== 4) Dự đoán xác suất trên tập test ====
test$prob <- predict(model_glm, newdata = test, type = "response")
# ==== 5) ROC & AUC; chọn ngưỡng tốt theo Youden J ====
roc_obj <- pROC::roc(response = test$is_delayed, predictor = test$prob)
auc_roc <- pROC::auc(roc_obj)
best_thr <- as.numeric(pROC::coords(roc_obj, "best", best.method = "youden")["threshold"])
cat(sprintf("ROC-AUC = %.3f\n", auc_roc))
cat(sprintf("Ngưỡng tốt (Youden J) = %.3f\n", best_thr))
# ==== 6) Ma trận nhầm lẫn & các chỉ số ở 2 ngưỡng (0.5 và best_thr) ====
metrics_at_threshold <- function(thr, y_true, y_prob) {
y_pred <- ifelse(y_prob >= thr, 1L, 0L)
TP <- sum(y_pred == 1 & y_true == 1)
TN <- sum(y_pred == 0 & y_true == 0)
FP <- sum(y_pred == 1 & y_true == 0)
FN <- sum(y_pred == 0 & y_true == 1)
acc <- (TP + TN) / (TP + TN + FP + FN)
prec <- ifelse((TP + FP) == 0, NA_real_, TP / (TP + FP))
rec  <- ifelse((TP + FN) == 0, NA_real_, TP / (TP + FN))
f1   <- ifelse(is.na(prec) || is.na(rec) || (prec + rec) == 0, NA_real_, 2 * prec * rec / (prec + rec))
list(threshold = thr, TP = TP, TN = TN, FP = FP, FN = FN,
accuracy = acc, precision = prec, recall = rec, F1 = f1)
}
m05  <- metrics_at_threshold(0.5,  test$is_delayed, test$prob)
mbst <- metrics_at_threshold(best_thr, test$is_delayed, test$prob)
cat("\n== Chỉ số ở ngưỡng 0.5 ==\n")
print(m05)
cat("\n== Chỉ số ở ngưỡng tối ưu (Youden J) ==\n")
print(mbst)
# ==== 7) PR AUC (Precision-Recall) ====
# PRROC yêu cầu truyền điểm dự đoán cho lớp dương và âm riêng biệt
pos_scores <- test$prob[test$is_delayed == 1]
neg_scores <- test$prob[test$is_delayed == 0]
pr_obj <- PRROC::pr.curve(scores.class0 = pos_scores, scores.class1 = neg_scores, curve = TRUE)
auc_pr <- pr_obj$auc.integral
cat(sprintf("\nPR-AUC = %.3f\n", auc_pr))
# ==== 8) Brier score (độ hiệu chỉnh xác suất) ====
brier <- mean((test$prob - test$is_delayed)^2)
cat(sprintf("Brier score = %.4f (càng nhỏ càng tốt)\n", brier))
# ==== 9) Bảng hiệu chỉnh (calibration) theo decile xác suất ====
calib_table <- test %>%
dplyr::mutate(bin = ntile(prob, 10)) %>%
dplyr::group_by(bin) %>%
dplyr::summarise(
n = dplyr::n(),
mean_pred_prob = mean(prob),
observed_rate  = mean(is_delayed)
) %>%
dplyr::arrange(bin)
cat("\n== Bảng hiệu chỉnh theo decile xác suất ==\n")
print(calib_table)
install.packages("DBI")
install.packages("RMySQL")
install.packages("RMariaDB")
library(DBI)
library(RMySQL)
library(RMariaDB)
# Thiết lập thông tin kết nối
host <- "127.0.0.1"
post <- 3306
dbname <- "FPT"
user <- "Duck"
password = "Trungduc09052004"
# Tạo kết nối đến cơ sở dữ liệu
con <- dbConnect(RMySQL::MySQL(),
host = host,
post = post,
dbname = dbname,
user = user,
password = password)
# Kiểm tra kết nối
# Tạo kết nối đến cơ sở dữ liệu
con <- dbConnect(RMySQL::MySQL(),
host = host,
post = post,
dbname = dbname,
user = user,
password = password)
conn <- tryCatch({
dbConnect(RMariaDB::MariaDB(),
dbname = dbname,
host = host,
post = post,
user = user,
password = password)
}, error = function(e) {
stop("Không thể kết nối đến dữ liệu:" ,e$message)
})
# Kiểm tra kết nối
# Tạo kết nối đến cơ sở dữ liệu
con <- dbConnect(RMySQL::MySQL(),
host = host,
post = post,
dbname = dbname,
user = user,
password = password)
conn <- tryCatch({
dbConnect(RMariaDB::MariaDB(),
dbname = dbname,
host = host,
post = post,
user = user,
password = password)
}, error = function(e) {
stop("Không thể kết nối đến dữ liệu:" ,e$message)
})
# Kiểm tra kết nối
if(!dnIsValid(conn)){
stop("không thể kết nối đến cơ sở dữ liệu")
} else {
print("Kết nối thành công ")
}
# Tạo kết nối đến cơ sở dữ liệu
con <- dbConnect(RMySQL::MySQL(),
host = host,
post = post,
dbname = dbname,
user = user,
password = password)
conn <- tryCatch({
dbConnect(RMariaDB::MariaDB(),
dbname = dbname,
host = host,
post = post,
user = user,
password = password)
}, error = function(e) {
stop("Không thể kết nối đến dữ liệu:" ,e$message)
})
# Kiểm tra kết nối
if(!dbIsValid(conn)){
stop("không thể kết nối đến cơ sở dữ liệu")
} else {
print("Kết nối thành công ")
}
# Tạo kết nối đến cơ sở dữ liệu
con <- dbConnect(RMySQL::MySQL(),
host = host,
post = post,
dbname = dbname,
user = user,
password = password)
conn <- tryCatch({
dbConnect(RMariaDB::MariaDB(),
dbname = dbname,
host = host,
post = post,
user = user,
password = password)
}, error = function(e) {
stop("Không thể kết nối đến dữ liệu:" ,e$message)
})
# Kiểm tra kết nối
if(!dbIsValid(con){
# Tạo kết nối đến cơ sở dữ liệu
con <- dbConnect(RMySQL::MySQL(),
host = host,
post = post,
dbname = dbname,
user = user,
password = password)
conn <- tryCatch({
dbConnect(RMariaDB::MariaDB(),
dbname = dbname,
host = host,
post = post,
user = user,
password = password)
}, error = function(e) {
stop("Không thể kết nối đến dữ liệu:" ,e$message)
})
# Kiểm tra kết nối
if(!dbIsValid(con)){
stop("không thể kết nối đến cơ sở dữ liệu")
} else {
print("Kết nối thành công ")
}
# Tạo kết nối đến cơ sở dữ liệu
con <- dbConnect(RMySQL::MySQL(),
host = host,
post = post,
dbname = dbname,
user = user,
password = password)
conn <- tryCatch({
dbConnect(RMariaDB::MariaDB(),
dbname = dbname,
host = host,
post = post,
user = user,
password = password)
}, error = function(e) {
stop("Không thể kết nối đến dữ liệu:" ,e$message)
})
# Kiểm tra kết nối
if(!dbIsValid(conn)){
stop("không thể kết nối đến cơ sở dữ liệu")
} else {
print("Kết nối thành công ")
}
# Tạo kết nối đến cơ sở dữ liệu
con <- dbConnect(RMySQL::MySQL(),
host = host,
post = post,
dbname = dbname,
user = user,
password = password)
conn <- tryCatch({
dbConnect(RMariaDB::MariaDB(),
dbname = dbname,
host = host,
post = post,
user = user,
password = password)
}, error = function(e) {
stop("Không thể kết nối đến dữ liệu:" ,e$message)
})
# Kiểm tra kết nối
if(!dbIsValid(conn)){
stop("không thể kết nối đến cơ sở dữ liệu")
} else {
print("Kết nối thành công ")
}
# Tạo kết nối đến cơ sở dữ liệu
con <- dbConnect(RMySQL::MySQL(),
host = host,
post = post,
dbname = dbname,
user = user,
password = password)
conn <- tryCatch({
dbConnect(RMariaDB::MariaDB(),
dbname = dbname,
host = host,
post = post,
user = user,
password = password)
}, error = function(e) {
stop("Không thể kết nối đến dữ liệu:" ,e$message)
})
# Kiểm tra kết nối
if(!dbIsValid(conn)){
stop("không thể kết nối đến cơ sở dữ liệu")
} else {
print("Kết nối thành công ")
}
# Tạo bảng nhân viên
dbExecute(conn, "
CREATE TABLE employee (
SupportRepID INT NOT NULL AUTO_INCREMENT,
Firstname VARCHAR(255),
Lastname VARCHAR(255),
Department VARCHAR(255),
Phone VARCHAR(20),
Email VARCHAR(255),
PRIMARY KEY (SupportRepID))
")
print("Tạo bảng nhân viên thành công")
# Thêm dữ liệu vào bảng
INSERT INTO employee (SupportRepId, FirstName, LastName, Department, Phone, Email)
# Thêm dữ liệu vào bảng
dbExecute(conn, "
INSERT INTO employee (
SupportRepId, FirstName, LastName, Department, Phone, Email)
VALUES
(1, 'Triệu Văn', 'QUang', 'Kinh doanh', '07856643a435', 'quang@gmail.com'),
(2, 'Nguyễn Việt', 'Thnah', 'Mảketing', '044457224872', 'thanh@gmail.com'),
(3, 'Trân Thanh', 'Tài', 'Sale', '094a7845454', 'tài@gmail.com'),
(4, 'Quản văn', 'Binh', 'Tư vấn', '0872312312121', 'hai@gmail.com'),
(5, 'Vũ văn', 'Hải', 'Giám đốc', '07213242 54', 'hoa@gmail.com')"
)
# Tạo bảng mới
dbExecute(conn, "
CREATE TABLE customer_info (
CustomerId INT NOT NULL AUTO_INCREMENT,
FirstName VARCHAR(255),
LastName VARCHAR(255),
Company VARCHAR(255),
Address VARCHAR(255),
City VARCHAR(255),
State VARCHAR(255),
Title VARCHAR(255),
PostalCode VARCHAR(255),
Phone VARCHAR(255),
Fax VARCHAR(255),
Email VARCHAR(255),
SupportRepId INT,
PRIMARY KEY (CustomerId),
FOREIGN KEY (SupportRepId) REFERENCES employee (SupportRepId)
)"
)
print("Tạo bảng thành công")
# Thêm dữ liệu vào bảng
dbExecute(conn, "
INSERT INTO customer_info (FirstName, LastName, Company, Address, City, State, Title, PostalCode, Phone, Fax, Email, SupportRepId)
VALUES
('Nguyễn Xuân', 'Huy', 'FPTU HCM', 'Phú Hữu', 'Thủ Đức', 'Đồng Nai', 'Giảng viên', '7000000', '078566433435', '078566433435', 'huy@gmail.com', 1),
('Đường Trân', 'Toàn', 'Thép Quốc Thái', 'Nam Long', 'Long An', 'Long An', 'Tổng GĐ', '6000000', '0644572242', '0644572242', 'toan@gmail.com', 2),
('Khiếu Hoàng', 'Lâm', 'VCB HCM', 'Thủ Đức', 'Biên Hòa', 'Đồng Nai', 'Nhân viên', '5000000', '0947845454', '0947845454', 'lam@gmail.com', 3),
('Chu Thị', 'Nhường', 'HUTECH', 'Thủ Đức', 'Thủ Dầu Một', 'HCM', 'Nhân viên kế toán', '7000010', '08723112121', '08723112121', 'nhuong@gmail.com', 4),
('Nguyễn Văn', 'Hòa', 'An Khang', 'HCM', 'Trảng Bàng', 'Tây Ninh', 'Kinh doanh', '6000000', '0721242545454', '0721242545454', 'hoa@gmail.com', 5)
")
print("Thêm dữ liệu vào bảng thành công")
# Kiểm tra dữ liệu đã thêm
cus <- select.list(customer_info)
# Kiểm tra dữ liệu đã thêm
cus <- select(customer_info)
# Kiểm tra dữ liệu đã thêm
cus <- select(customer_info, *)
# Kiểm tra dữ liệu đã thêm
cus <- select(customer_info, FirstName)
# Kiểm tra dữ liệu đã thêm
result <- dbGetQuery(conn, "SELECT * FROM employee")
print(result)
# Kiểm tra dữ liệu đã thêm
result <- dbGetQuery(conn, "SELECT * FROM employee")
print(result)
result2 <- dbGetQuery(conn, "SELECT * FROM customer_info")
print(result2)
# Tạo kết nối đến cơ sở dữ liệu SQLite
chickwts
# Tạo kết nối đến cơ sở dữ liệu SQLite
db(chinook)
# Tạo kết nối đến cơ sở dữ liệu SQLite
install.packages("RJDBC")
install.packages("RSQLite")
install.packages("RJDBC")
system("apt-get install -y default-jdk")
library(RJDBC)
install.packages("RJDBC")
library(RJDBC)
install.packages("RJDBC")
library(RJDBC)
library(RJDBC)
library(RJDBC)
library(RJDBC)
library(RJDBC)
